### Aliases & Functions

## Quick check on running tomcat processes
alias pst='ps ax | grep -i tomcat'
## Quick check on running java processes
alias psj='ps ax | grep -i java'
## Quick check on running node processes
alias psn='ps ax | grep -i node'
## Quick process grep alias
alias psg='ps ax | grep'

## List all files colorized in long format
alias ll="ls -ltrhF ${colorflag}"

## List all files colorized in long format, including dot files
alias la="ls -ltrhaF ${colorflag}"

## Always use color output for `ls`
alias ls="command ls ${colorflag}"

## Make sure my aliases are accessible
alias sudo='sudo '

## Lazy hosts check
alias hosts='sudo vim /etc/hosts'

## Switch between nodejs versions, use: nodeversion 5
alias nodeversion='nvm use'

## Show hidden files in Finder
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
## Hide hidden files in Finder
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

## Lock the screen (when going AFK)
alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"

## Print all java homes
alias javahomes="/usr/libexec/java_home -V"

## Flush the local dns cache
alias flushdnscache="sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder"

### Utility Functions

## The function you just used
function aliases() {
  echo
  grep -A10000 "^###" ~/.aliases | awk -f <(echo "$VAR_ALIASES")
  echo
}

## Update all software and push to github
alias update="sh ~/.dotfiles/update.sh"

## Switch between all installed JDK versions, e.g. setjdk 8
function setjdk() (
  removeFromPath() {
    export PATH=$(echo $PATH | sed -E -e "s;:$1;;" -e "s;$1:?;;")
  }

  if [ $# -ne 0 ]; then
   removeFromPath '/System/Library/Frameworks/JavaVM.framework/Home/bin'
   if [ -n "${JAVA_HOME+x}" ]; then
    removeFromPath $JAVA_HOME
   fi
   export JAVA_HOME=`/usr/libexec/java_home -v 1.$@`
   export PATH=$JAVA_HOME/bin:$PATH
  fi
)

# Given a collection of image files, this function will resize
# the images in the current folder and saves them in the subfolder resized
#
# Usage: resize-images
# Note: the read command is specific for ZSH shells, for Bash, use -p param
#
## Resize and rename images in the current directory and writes them to a resized subfolder
function resize-images() {
  read "filename?What would you like the filename to be started with? []: "
  read "width?What max width in pixels would you like your images? [1024]: "
  read "height?What max height in pixels would you like your images? [768]: "

  width=${width:-1024}
  height=${height:-768}

  echo
  echo "All images will be renamed to $filename-xx.jpg with a maximum resolution of $width x $height pixels."
  echo

  mkdir -p resized

  # start renaming and resizing the images
  count=1
  total=$(find . -type f \( -name "*.jpg" -or -name "*.jpeg" -or -name "*.JPG" -or -name "*.JPEG" \) -maxdepth 1 | wc -l | sed 's/ //g')

  # shopt in bash
  setopt nullglob nocaseglob

  for file in *.jpg *.jpeg
  do
    # rename
    new=$(printf "${filename}_%03d.jpg" $count)
    echo
    echo "($count/$total) Processing $file and renaming to $new..."
    echo

    cp $file $new

    # resize and move
    sips --resampleHeightWidth $height $width --setProperty formatOptions 80 $new --out resized/

    # remove temp file
    rm $new

    let count=count+1
  done

  # open the directory in Finder
  open resized/
}


### Docker Aliases & Functions
# Disclaimer: this is gathered and adapted from several other people's aliases

## Short for executing docker exec and jump into the running container
function dexec() { docker exec -it $1 bash }

## Get latest Docker container ID
alias docl="docker ps -l -q"

## Get Docker container processes
alias dps="docker ps"

## Get Docker images
alias dimages="docker images"

## Get Docker container IP
alias docip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"

## Stop all Docker containers
function dstopall() { docker stop $(docker ps -a -q); }

## Remove all Docker containers
function drm() { docker rm $(docker ps -a -q); }

## Stop and Remove all Docker containers
alias docsrm='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'

## Remove all Docker images
function drmiall() { docker rmi $(docker images -q); }


## Exports

# set sublime as my editor
export EDITOR="vim"

# Tell grep to highlight matches
export GREP_OPTIONS='â€”color=auto'

# Detect which `ls` flavor is in use
if ls --color > /dev/null 2>&1; then # GNU `ls`
  colorflag="--color"
else # OS X `ls`
  colorflag="-G"
fi

# List colors
export LS_COLORS='no=00:fi=00:di=01;34:ln=01;36:pi=40;33:so=01;35:do=01;35:bd=40;33;01:cd=40;33;01:or=40;31;01:ex=01;32:*.tar=01;31:*.tgz=01;31:*.arj=01;31:*.taz=01;31:*.lzh=01;31:*.zip=01;31:*.z=01;31:*.Z=01;31:*.gz=01;31:*.bz2=01;31:*.deb=01;31:*.rpm=01;31:*.jar=01;31:*.jpg=01;35:*.jpeg=01;35:*.gif=01;35:*.bmp=01;35:*.pbm=01;35:*.pgm=01;35:*.ppm=01;35:*.tga=01;35:*.xbm=01;35:*.xpm=01;35:*.tif=01;35:*.tiff=01;35:*.png=01;35:*.mov=01;35:*.mpg=01;35:*.mpeg=01;35:*.avi=01;35:*.fli=01;35:*.gl=01;35:*.dl=01;35:*.xcf=01;35:*.xwd=01;35:*.ogg=01;35:*.mp3=01;35:*.wav=01;35:'

export CLICOLOR=1

# Prefer US English and use UTF-8.
export LANG='en_US.UTF-8';
export LC_ALL='en_US.UTF-8';



#------------------------------------------------------------------------------------------------------------------------------
# this below code is used to document aliases
# only the lines with 2 dashes will be catched
IFS='' read -r -d '' VAR_ALIASES <<'EOF'
sub(/^###[[:space:]]+/,"") {
  printf "%s%s\\n------------------------------------------------------------------------------\\n", rs, $0
  rs = "\\n"
}

sub(/^##[[:space:]]+/,"") {
  desc = $0
}

$1 == "alias" && sub(/=.*/,"",$2) {
  printf "%-15s - %s\\n", $2, desc
}

$1 == "function" && sub(/\(\).*/,"",$2) {
  printf "%-15s - %s\\n", $2, desc
}

EOF



