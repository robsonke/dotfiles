### Aliases & Functions

## Quick check on running tomcat processes
alias pst='ps ax | grep -i tomcat'
## Quick check on running java processes
alias psj='ps ax | grep -i java'
## Quick check on running node processes
alias psn='ps ax | grep -i node'
## Quick process grep alias
alias psg='ps ax | grep'

## Find PID of running process on port
findport() { lsof -t -i :$1; }
killport() { kill -9 "$(lsof -t -i :$1)"; }

## Fix a git conflict easily with mine/yours 
alias fix-conflict="sh /Users/robsonke/.dotfiles/macos/fix-conflict.sh"

## List all files colorized in long format
alias ll="ls -ltrhF ${colorflag}"

## List all files colorized in long format, including dot files
alias la="ls -ltrhaF ${colorflag}"

## Always use color output for `ls`
alias ls="command ls ${colorflag}"

## List only directories
alias lsd="ls -lF ${colorflag} | grep --color=never '^d'"

## quick gotos
alias msrc="cd ~/maxxton/sources/mxt2/services"

## Use colorized cat (ccat) instead of normal cat
#alias cat=ccat

## Make sure my aliases are accessible
alias sudo='sudo '

## Lazy hosts check
alias hosts='sudo vim /etc/hosts'

## Show hidden files in Finder
alias show="defaults write com.apple.finder AppleShowAllFiles -bool true && killall Finder"
## Hide hidden files in Finder
alias hide="defaults write com.apple.finder AppleShowAllFiles -bool false && killall Finder"

## Lock the screen (when going AFK)
alias afk="/System/Library/CoreServices/Menu\ Extras/User.menu/Contents/Resources/CGSession -suspend"

## Print all java homes
alias javahomes="/usr/libexec/java_home -V"

## Flush the local dns cache
alias flushdnscache="sudo dscacheutil -flushcache;sudo killall -HUP mDNSResponder"

## Restart the local dnsmasq server and flush the dns cache
alias restartdns="sudo launchctl stop homebrew.mxcl.dnsmasq; sudo launchctl start homebrew.mxcl.dnsmasq; flushdnscache"

## Reset the Homebrew Git repository back to master
alias brew_reset="cd $(brew --repository) && git fetch && git reset --hard origin/master && git pull"


### Kubectl Kubernetes shortcodes
## Kubectl cli shortcode
alias kc='kubectl'

## Kubectl get pods
alias kp='kubectl get pods'

## Kubectl logs
alias kl='kubectl logs'

## Parse mxts service logs human readable, use: klmxts podname
function klmxts() {
  kubectl logs $1 -f | grep -v "ACCESS" | jq -Rr 'fromjson | ([.timestamp,.level,.message,.exception]) | @tsv' | sed -e "s/\\\\n/\n        /g"
}

## Kubectl delete
#alias kde='kubectl delete'

## Kubectl describe
alias kd='kubectl describe'

## Kubectl get
alias kg='kubectl get'

## Kubectl top
alias kt='kubectl top'

## Kubens
alias kn='kubens'

## Get a token to use the gce api
alias kubetoken='gcloud config config-helper --format=json'

## Short for executing kubectl exec and jump into the running container
function kcexec() { kc exec -it $1 sh }

# Source all extra aliases with sensitive info which we don't want in Git
source $HOME/Dropbox/Maxxton/extra_aliases


### Utility Functions

## The function you just used
function aliases() {
  echo
  grep -A10000 "^###" ~/.aliases | awk -f <(echo "$VAR_ALIASES")
  echo
}

## angular i18n - export xliffs
alias xi18n="node_modules/.bin/ng-xi18n -p tsconfig-xi18n.json"

## Update all software and push to github
alias update="sh ~/.dotfiles/update.sh"

## Kill all processes matching this name
function killit() {
  procs=$(ps aux | grep $@ | grep -v grep | awk '{print $2}')
  echo 'killing $procs'
  kill -9 $procs
}

## Switch between all installed JDK versions, e.g. setjdk 8
function setjdk() {
  removeFromPath() {
    export PATH=$(echo $PATH | sed -E -e "s;:$1;;" -e "s;$1:?;;")
  }

  if [ $# -ne 0 ]; then
    removeFromPath '/System/Library/Frameworks/JavaVM.framework/Home/bin'
    if [ -n "${JAVA_HOME+x}" ]; then
      removeFromPath $JAVA_HOME
    fi

    if [ $@ = 8 ]; then
      export JAVA_HOME="`/usr/libexec/java_home -v 1.$@`"
    else
      export JAVA_HOME="`/usr/libexec/java_home -v $@`"
    fi
#echo Setting JAVA_HOME to $JAVA_HOME
    export PATH="$JAVA_HOME/bin:$PATH"
  fi
}

# Given a collection of image files, this function will resize
# the images in the current folder and saves them in the subfolder resized
#
# Usage: resize-images
# Note: the read command is specific for ZSH shells, for Bash, use -p param
#
## Resize and rename images in the current directory and writes them to a resized subfolder
function resize-images() {
  read "filename?What would you like the filename to be started with? []: "
  read "width?What max width in pixels would you like your images? [1280]: "
  read "height?What max height in pixels would you like your images? [960]: "

  width=${width:-1280}
  height=${height:-960}

  echo
  echo "All images will be renamed to $filename-xx.jpg with a maximum resolution of $width x $height pixels."
  echo

  mkdir -p resized

  # start renaming and resizing the images
  count=1
  total=$(find . -type f \( -name "*.jpg" -or -name "*.jpeg" -or -name "*.JPG" -or -name "*.JPEG" \) -maxdepth 1 | wc -l | sed 's/ //g')

  # shopt in bash
  setopt nullglob nocaseglob

  for file in *.jpg *.jpeg
  do
    # rename
    new=$(printf "${filename}_%03d.jpg" $count)
    echo
    echo "($count/$total) Processing $file and renaming to $new..."
    echo

    cp $file $new

    # possibly rotate an image
    jhead -autorot $new

    # resize and move
    sips --resampleHeightWidthMax ${width}x${height} --setProperty formatOptions 80 $new --out resized/

    # remove temp file
    rm $new

    let count=count+1
  done

  # open the directory in Finder
  open resized/
}

## Switch between nodejs versions, use: nodeversion 5
function nodeversion() {
  nvm use $1
}

### Docker Aliases & Functions
# Disclaimer: this is gathered and adapted from several other people's aliases

## Short for executing docker exec and jump into the running container
function dexec() { docker exec -it $1 sh }

## Get latest Docker container ID
alias docl="docker ps -l -q"

## Get Docker container processes
alias dps="docker ps"

## Get Docker images
alias dimages="docker images"

## Get Docker container IP
alias docip="docker inspect --format '{{ .NetworkSettings.IPAddress }}'"

## Stop all Docker containers
function dstopall() { docker stop $(docker ps -a -q); }

## Remove all Docker containers
function drm() { docker rm $(docker ps -a -q); }

## Stop and Remove all Docker containers
alias docsrm='docker stop $(docker ps -a -q) && docker rm $(docker ps -a -q)'

## Remove all Docker images
function drmiall() { docker rmi $(docker images -q); }

## Clears all non running images/volumes/containers
alias dprune='docker system prune -a --volumes'

#------------------------------------------------------------------------------------------------------------------------------
# this below code is used to document aliases
# only the lines with 2 dashes will be catched
IFS='' read -r -d '' VAR_ALIASES <<'EOF'
sub(/^###[[:space:]]+/,"") {
  printf "%s%s\\n------------------------------------------------------------------------------\\n", rs, $0
  rs = "\\n"
}

sub(/^##[[:space:]]+/,"") {
  desc = $0
}

$1 == "alias" && sub(/=.*/,"",$2) {
  printf "%-15s - %s\\n", $2, desc
}

$1 == "function" && sub(/\(\).*/,"",$2) {
  printf "%-15s - %s\\n", $2, desc
}

EOF
